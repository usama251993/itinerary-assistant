# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Trip {
  id: String!
  source: String!
  destination: String!
  start: DateTime!
  end: DateTime!
  name: String!

  """Fetch all the `PERSON`s associated with `TRIP` having `{ id: id }`"""
  accomplices: [Person!]
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Person {
  id: ID!
  fullName: String!
  email: String!
  phone: String!
  dateOfBirth: DateTime
  gender: Gender
  website: String!

  """Fetch all the `ADDRESS`es associated with `PERSON` having `{ id: id }`"""
  addresses: [Address!]

  """Fetch all the `TRIP`s associated with person having `{ id: id }`"""
  trips: [Trip!]
}

"""The gender of the person"""
enum Gender {
  FEMALE
  MALE
  OTHER
}

type Address {
  id: ID!
  room: String!
  apartment: String!
  wing: String!
  street: String!
  landmark: String!
  locality: String!
  suburb: String!
  city: String!
  state: String!
  country: String!
  zip: String!
  addressType: String!

  """Get the `PERSON`s residing at the `ADDRESS` having `{ id: id }"""
  residents: [Person!]
}

type Query {
  """Fetch all the nodes labelled `ADDRESS` in the database"""
  getAddresses: [Address!]!

  """Get the `ADDRESS` having `{ id: id }`"""
  getAddress(id: String!): Address

  """Fetch all the nodes labelled `PERSON` in the database"""
  getPeople: [Person!]

  """Get `PERSON` having `{ id: id }`"""
  getPerson(id: String!): Person

  """Get `TRIP` having `{ id: id }`"""
  getTrip(id: String!): Trip
}

type Mutation {
  """Create a new node having label `ADDRESS` with the input provided"""
  createAddress(address: AddressInput!): Address!

  """Update the `ADDRESS` having `{ id: id }` with the input provided"""
  updateAddress(id: String!, address: AddressInput!): Address!

  """Delete the `ADDRESS` having `{ id: id }`"""
  deleteAddress(id: String!): Address!

  """
  Link the `ADDRESS` having `{ id: addressId }` to the `PERSON` having `{ id: personId }`, if not linked already
  """
  associateAddressWithPerson(addressId: String!, personId: String!): Address!

  """
  Unlink the `ADDRESS` having `{ id: addressId }` to the `PERSON` having `{ id: personId }`, if not linked already
  """
  disassociateAddressWithPerson(addressId: String!, personId: String!): Address!

  """Create a new node having label `PERSON` with the input provided"""
  createPerson(person: PersonInput!): Person!

  """Update the `PERSON` having `{ id: id }` with the input provided"""
  updatePerson(id: String!, person: PersonInput!): Person!

  """Delete the `PERSON` having `{ id: id }`"""
  deletePerson(id: String!): Person!

  """Create a new node having label `TRIP` with the input provided"""
  createTrip(trip: TripInput!): Trip!

  """Update the `TRIP` having `{ id: id }` with the input provided"""
  updateTrip(id: String!, trip: TripInput!): Trip!

  """Delete the `TRIP` having `{ id: id }`"""
  deleteTrip(id: String!): Trip!

  """
  Link `TRIP` having `{ id: tripId }` to the `PERSON` having `{ id: personId }`, if not linked already
  """
  associateTripWithPerson(tripId: String!, personId: String!): Trip!
}

input AddressInput {
  id: String
  room: String
  apartment: String
  wing: String
  street: String
  landmark: String
  locality: String
  suburb: String
  city: String
  state: String
  country: String
  zip: String
  addressType: String
}

input PersonInput {
  id: String
  fullName: String
  email: String
  phone: String
  gender: Gender
  dateOfBirth: DateTime
  website: String
}

input TripInput {
  id: String
  source: String
  destination: String
  start: DateTime
  end: DateTime
  name: String
}