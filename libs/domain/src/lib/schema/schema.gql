# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Person {
  id: ID!
  fullName: String!
  email: String!
  phone: String!
  dateOfBirth: DateTime
  gender: Gender
  website: String!
  addresses: [Address!]
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""The gender of the person"""
enum Gender {
  FEMALE
  MALE
  OTHER
}

type Address {
  id: ID!
  room: String!
  apartment: String!
  wing: String!
  street: String!
  landmark: String!
  locality: String!
  suburb: String!
  city: String!
  state: String!
  country: String!
  zip: String!
  addressType: String!
  residents: [Person!]
}

type Query {
  getAddress(id: String!): Address!
  getPeople: [Person!]
  getPerson(id: String!): Person!
}

type Mutation {
  createAddress(address: AddressInput!): Address!
  updateAddress(id: String!, address: AddressInput!): Address!
  deleteAddress(id: String!): Address!
  associateAddressWithPerson(addressId: String!, personId: String!): Address!
  createPerson(person: PersonInput!): Person!
  updatePerson(id: String!, person: PersonInput!): Person!
  deletePerson(id: String!): Person!
}

input AddressInput {
  id: String
  room: String
  apartment: String
  wing: String
  street: String
  landmark: String
  locality: String
  suburb: String
  city: String
  state: String
  country: String
  zip: String
  addressType: String
}

input PersonInput {
  id: String
  fullName: String
  email: String
  phone: String
  gender: Gender
  dateOfBirth: DateTime
  website: String
}