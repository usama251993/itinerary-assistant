# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Coordinates {
  id: ID!
  latitude: Float!
  longitude: Float!
}

type Timezone {
  id: ID!
  description: String!
  offset: Float!
}

type Location {
  id: ID!
  plusCode: String!
  coordinates: Coordinates!
  timezone: Timezone!
}

type Tenure {
  id: ID!
  start: DateTime!
  end: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Address {
  id: ID!
  name: String!
  room: String!
  apartment: String!
  wing: String!
  street: String!
  landmark: String!
  locality: String!
  suburb: String!
  city: String!
  state: String!
  country: String!
  zip: String!
  location: Location!
  residents: [Person!]!
}

type Demographics {
  id: ID!
  salutation: Salutation!
  firstName: String!
  middleName: String!
  lastName: String!
  nickname: String!
}

"""The salutation associated with the demographics of the person"""
enum Salutation {
  MISTER
  MISTRESS
  MISS
  DOCTOR
}

type Identification {
  id: ID!
  type: String!
  number: String!
  name: String!
  validity: Tenure!
}

type SocialConnection {
  id: ID!
  name: String!
  url: String!
}

type Person {
  id: ID!
  fullName: String!
  email: String!
  phone: String!
  website: String!
  dateOfBirth: DateTime
  gender: Gender
  address: Address!
  demographics: Demographics!
  identifications: [Identification!]!
  socialConnections: [SocialConnection!]!
}

"""The gender of the person"""
enum Gender {
  FEMALE
  MALE
  OTHER
}

type Query {
  getAddress(id: String!): Address!
  getPeople: [Person!]!
  getPerson(id: String!): Person!
}

type Mutation {
  createAddress(address: AddressInput!): Address!
  associateAddressWithPerson(addressId: String!, personId: String!): Address!
  updateAddress(id: String!, address: AddressInput!): Address!
  deleteAddress(id: String!): Address!
  createPerson(person: PersonInput!): Person!
  updatePerson(id: String!, person: PersonInput!): Person!
  deletePerson(id: String!): Person!
  createLocation(location: LocationInput!): Location!
}

input AddressInput {
  id: String
  name: String
  room: String
  apartment: String
  wing: String
  street: String
  landmark: String
  locality: String
  suburb: String
  city: String
  state: String
  country: String
  zip: String
}

input PersonInput {
  id: String
  fullName: String
  email: String
  phone: String
  website: String
  gender: Gender
  dateOfBirth: DateTime
}

input LocationInput {
  id: String
  plusCode: String
}