# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Coordinates {
  id: ID!
  latitude: Float!
  longitude: Float!
  locationId: ID!
}

type Timezone {
  id: ID!
  description: String!
  offset: Float!
  locationId: ID!
}

type Location {
  id: ID!
  plusCode: String!
  coordinates: Coordinates!
  timezone: Timezone!
}

type Tenure {
  id: ID!
  start: DateTime!
  end: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Address {
  id: ID!
  name: String!
  room: String!
  apartment: String!
  wing: String!
  street: String!
  landmark: String!
  locality: String!
  suburb: String!
  city: String!
  state: String!
  country: String!
  zip: String!
  location: Location!
  userId: ID!
}

type Demographics {
  id: ID!
  salutation: Salutation!
  firstName: String!
  middleName: String!
  lastName: String!
  nickname: String!
  userId: String!
}

"""The salutation associated with the demographics of the person"""
enum Salutation {
  Mister
  Mistress
  Miss
  Doctor
}

type Identification {
  id: ID!
  type: String!
  number: String!
  name: String!
  validity: Tenure!
  userId: ID!
}

type Photo {
  id: ID!
  large: String!
  medium: String!
  thumbnail: String!
  userId: ID!
}

type SocialConnection {
  id: ID!
  name: String!
  url: String!
  userId: ID!
}

type User {
  id: ID!
  fullName: String!
  demographics: Demographics!
  email: String!
  phone: String!
  dateOfBirth: DateTime!
  gender: Gender!
  website: String!
  address: Address!
  identifications: [Identification!]!
  socialConnections: [SocialConnection!]!
  photos: [Photo!]!
}

"""The gender of the person"""
enum Gender {
  Female
  Male
  Other
}

type Query {
  gqlSanity: String!
  neo4jSanity: [User!]!
  user(id: String!): User!
  users: [User!]!
}